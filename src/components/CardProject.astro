---
import type { LanguagesContent } from "../types/content";
import type { IProject } from "../types/content";
import ButtonComplete from "./basic/ButtonComplete";
import Splide from "@splidejs/splide";
import { generateUrl } from "../utils/generateUrl";

interface Props {
  project: IProject;
  seeProjectText: string;
  seeProjectIcon: string;
  language: LanguagesContent;
  index: number;
}

const { project, seeProjectIcon, seeProjectText, language, index } =
  Astro.props;

const {
  title,
  description,
  imageUrl,
  technologiesTitle,
  technologiesUsed,
  type,
} = project;

const urlProject = `/${language}/projects/${generateUrl(title)}`;
---

<technology-card
  class="bg-white rounded-md shadow-md px-4 py-5"
  data-technologieslength={technologiesUsed.length}
>
  <div class="flex justify-between gap-5 text-xl mb-3">
    <h4
      title={title}
      class="text-primary-700 font-bold whitespace-nowrap overflow-hidden text-ellipsis"
    >
      {title}
    </h4>
    <span>{type}</span>
  </div>
  <div class="rounded-md overflow-hidden aspect-[16/10] mb-4 border">
    <img src={imageUrl} alt={title} class="h-full w-full object-cover" />
  </div>
  <p class="line-clamp-4 mb-6">{description}</p>
  <h6 class="text-primary-700 mb-3 font-bold">{technologiesTitle}</h6>
  <div class:list={["slider-card-technology", "splide", "mb-6"]} role="group">
    <div class="splide__track">
      <div class="splide__list">
        {
          technologiesUsed.map(({ name, url }) => {
            return (
              <div class="splide__slide flex justify-center">
                <img class="w-10" src={url} title={name} alt={name} />
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
  <ButtonComplete
    text={seeProjectText}
    icon1={seeProjectIcon}
    typeElement="a"
    href={urlProject}
    variant="outlined"
  />
</technology-card>

<script>
  import Splide from "@splidejs/splide";

  class TechnologyCard extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const numberTechnologies = Number.parseInt(
        this.dataset["technologieslength"] || "0"
      );

      const sliderTechnologies = this.querySelector(".slider-card-technology");

      new Splide(sliderTechnologies as HTMLElement, {
        arrows: false,
        pagination: false,
        type: numberTechnologies > 5 ? "loop" : "slide",
        mediaQuery: "min",
        perPage: numberTechnologies < 5 ? numberTechnologies : 5,
      }).mount();
    }
  }

  customElements.define("technology-card", TechnologyCard);
</script>
